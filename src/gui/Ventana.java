/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import back.conexionbd.ManejoBDException;
import back.control.ControlPreguntas;
import back.model.Categoria;
import back.model.Participante;
import back.model.Pregunta;
import back.model.Ronda;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hecto
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    private DefaultTableModel modelPuntaje;
    private DefaultTableModel modelRondas;
    private ControlPreguntas controlPreguntas;
    private ArrayList<JRadioButton> opciones;
    private final String PREGUNTA = "Pregunta";
    private final String CATEGORIA = "Categoria";
    private final int GANANCIA_POR_DIFICULTAD = 100000;
    private boolean estado;

    public Ventana() {
        initComponents();
        try {
            opciones = new ArrayList<>();
            controlPreguntas = new ControlPreguntas();

   

            llenarPuntajes();
            llenarTabla();
        } catch (ManejoBDException ex) {
            showMessageDialog(
                    this,
                    ex.getMessage(),
                    "Â¡Error Documento!",
                    ERROR_MESSAGE
            );
        }
        this.escenario.setVisible(false);
        this.crearPregunta.setVisible(false);
        this.CrearCategoria.setVisible(false);
        setLocationRelativeTo(null);
        agruparBotones();
        estado = true;
        completarForPreguntas();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        escenario = new javax.swing.JPanel();
        acumuladoJL = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        participanteJL = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        BR0 = new javax.swing.JRadioButton();
        BR2 = new javax.swing.JRadioButton();
        BR1 = new javax.swing.JRadioButton();
        BR3 = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        premio = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ronda = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rondas = new javax.swing.JTable();
        RetirarseB = new javax.swing.JButton();
        pregunta = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        categoria = new javax.swing.JLabel();
        InUsuarioJP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        puntajes = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        datosUsuario = new javax.swing.JTextField();
        jugarJB = new javax.swing.JButton();
        NombreU = new javax.swing.JLabel();
        crearPregunta = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        newPregunta = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        respuesta = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        respuesta2 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        respuesta4 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        respuesta1 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        respuesta3 = new javax.swing.JTextArea();
        categorias = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        CrearCategoria = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        nombreCategoria = new javax.swing.JTextField();
        dificultad = new javax.swing.JComboBox<>();
        as = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        premioN = new javax.swing.JLabel();
        CrearC = new javax.swing.JButton();
        CancaelarC = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        escenario.setBackground(new java.awt.Color(255, 255, 255));
        escenario.setPreferredSize(new java.awt.Dimension(1200, 700));
        escenario.setLayout(null);

        acumuladoJL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        escenario.add(acumuladoJL);
        acumuladoJL.setBounds(870, 90, 150, 50);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Participante: ");
        escenario.add(jLabel5);
        jLabel5.setBounds(20, 70, 150, 50);

        participanteJL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        escenario.add(participanteJL);
        participanteJL.setBounds(180, 70, 150, 50);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Acumulado:");
        escenario.add(jLabel7);
        jLabel7.setBounds(710, 90, 150, 50);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BR0.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        BR0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BR0MouseClicked(evt);
            }
        });
        jPanel2.add(BR0, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, -1, -1));

        BR2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        BR2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BR2MouseClicked(evt);
            }
        });
        jPanel2.add(BR2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 50, -1, -1));

        BR1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        BR1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BR1MouseClicked(evt);
            }
        });
        jPanel2.add(BR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, -1, -1));

        BR3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        BR3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BR3MouseClicked(evt);
            }
        });
        jPanel2.add(BR3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 170, -1, -1));

        escenario.add(jPanel2);
        jPanel2.setBounds(10, 400, 1180, 250);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, new java.awt.Color(0, 0, 0), java.awt.Color.black, java.awt.Color.black));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Premio por esta Ronda:");

        premio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Ronda:");

        ronda.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("de 5.");

        rondas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rondas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ronda", "Premio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rondas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        rondas.setEnabled(false);
        rondas.setGridColor(new java.awt.Color(0, 0, 0));
        rondas.setSelectionBackground(new java.awt.Color(102, 153, 255));
        rondas.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(rondas);
        if (rondas.getColumnModel().getColumnCount() > 0) {
            rondas.getColumnModel().getColumn(0).setResizable(false);
            rondas.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(premio, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ronda, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 141, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(ronda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(premio, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        escenario.add(jPanel3);
        jPanel3.setBounds(710, 170, 470, 210);

        RetirarseB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RetirarseB.setText("Retirarse");
        RetirarseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetirarseBActionPerformed(evt);
            }
        });
        escenario.add(RetirarseB);
        RetirarseB.setBounds(1040, 110, 130, 30);

        pregunta.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        escenario.add(pregunta);
        pregunta.setBounds(30, 280, 670, 100);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Pregunta:");
        escenario.add(jLabel8);
        jLabel8.setBounds(20, 240, 120, 30);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Categoria:");
        escenario.add(jLabel10);
        jLabel10.setBounds(20, 170, 140, 40);

        categoria.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        escenario.add(categoria);
        categoria.setBounds(170, 160, 370, 50);

        getContentPane().add(escenario, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InUsuarioJP.setBackground(new java.awt.Color(255, 255, 255));
        InUsuarioJP.setPreferredSize(new java.awt.Dimension(1200, 700));
        InUsuarioJP.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Reto Programa Preguntas");
        InUsuarioJP.add(jLabel1);
        jLabel1.setBounds(40, 30, 471, 44);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Ultimos Puntajes:");

        puntajes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Fecha", "Premio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        puntajes.setEnabled(false);
        jScrollPane7.setViewportView(puntajes);
        if (puntajes.getColumnModel().getColumnCount() > 0) {
            puntajes.getColumnModel().getColumn(0).setResizable(false);
            puntajes.getColumnModel().getColumn(1).setResizable(false);
            puntajes.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        InUsuarioJP.add(jPanel1);
        jPanel1.setBounds(760, 10, 420, 650);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Ingrese los siguientes datos para jugar");
        InUsuarioJP.add(jLabel3);
        jLabel3.setBounds(180, 200, 390, 20);

        datosUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                datosUsuarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                datosUsuarioKeyTyped(evt);
            }
        });
        InUsuarioJP.add(datosUsuario);
        datosUsuario.setBounds(360, 330, 150, 30);

        jugarJB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jugarJB.setText("Jugar");
        jugarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugarJBActionPerformed(evt);
            }
        });
        InUsuarioJP.add(jugarJB);
        jugarJB.setBounds(310, 440, 120, 31);

        NombreU.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        NombreU.setText("Nombre:");
        InUsuarioJP.add(NombreU);
        NombreU.setBounds(230, 330, 100, 30);

        getContentPane().add(InUsuarioJP, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        crearPregunta.setBackground(new java.awt.Color(255, 255, 255));
        crearPregunta.setPreferredSize(new java.awt.Dimension(1200, 700));
        crearPregunta.setLayout(null);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("CreaciÃ³n de Preguntas");
        crearPregunta.add(jLabel11);
        jLabel11.setBounds(30, 30, 280, 70);

        newPregunta.setColumns(20);
        newPregunta.setRows(5);
        jScrollPane2.setViewportView(newPregunta);

        crearPregunta.add(jScrollPane2);
        jScrollPane2.setBounds(170, 130, 420, 100);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Pregunta:");
        crearPregunta.add(jLabel12);
        jLabel12.setBounds(40, 140, 120, 50);

        respuesta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        respuesta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "respuesta 1", "respuesta 2", "respuesta 3", "respuesta 4" }));
        crearPregunta.add(respuesta);
        respuesta.setBounds(890, 250, 140, 23);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("<html>Seleccione la respuesta correcta<html>");
        jLabel13.setAutoscrolls(true);
        crearPregunta.add(jLabel13);
        jLabel13.setBounds(700, 230, 140, 60);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("Respuesta 1:");
        crearPregunta.add(jLabel14);
        jLabel14.setBounds(70, 360, 130, 20);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel15.setText("Respuesta 2:");
        crearPregunta.add(jLabel15);
        jLabel15.setBounds(620, 370, 130, 20);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel16.setText("Respuesta 3:");
        crearPregunta.add(jLabel16);
        jLabel16.setBounds(70, 480, 130, 20);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setText("Respuesta 4:");
        crearPregunta.add(jLabel17);
        jLabel17.setBounds(620, 470, 130, 30);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Crear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        crearPregunta.add(jButton1);
        jButton1.setBounds(350, 610, 150, 30);

        cancelar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        crearPregunta.add(cancelar);
        cancelar.setBounds(660, 610, 140, 30);

        respuesta2.setColumns(20);
        respuesta2.setRows(5);
        jScrollPane3.setViewportView(respuesta2);

        crearPregunta.add(jScrollPane3);
        jScrollPane3.setBounds(770, 350, 390, 80);

        respuesta4.setColumns(20);
        respuesta4.setRows(5);
        jScrollPane4.setViewportView(respuesta4);

        crearPregunta.add(jScrollPane4);
        jScrollPane4.setBounds(770, 450, 390, 76);

        respuesta1.setColumns(20);
        respuesta1.setRows(5);
        jScrollPane5.setViewportView(respuesta1);

        crearPregunta.add(jScrollPane5);
        jScrollPane5.setBounds(220, 350, 360, 76);

        respuesta3.setColumns(20);
        respuesta3.setRows(5);
        jScrollPane6.setViewportView(respuesta3);

        crearPregunta.add(jScrollPane6);
        jScrollPane6.setBounds(220, 450, 360, 76);

        categorias.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        crearPregunta.add(categorias);
        categorias.setBounds(860, 150, 210, 40);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText("<html>Selectione la categoria:<html>");
        crearPregunta.add(jLabel18);
        jLabel18.setBounds(700, 150, 130, 40);

        getContentPane().add(crearPregunta, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        CrearCategoria.setBackground(new java.awt.Color(255, 255, 255));
        CrearCategoria.setPreferredSize(new java.awt.Dimension(1200, 700));
        CrearCategoria.setLayout(null);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel19.setText("Crear Categoria");
        CrearCategoria.add(jLabel19);
        jLabel19.setBounds(120, 60, 240, 50);

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel20.setText("Nombre:");
        CrearCategoria.add(jLabel20);
        jLabel20.setBounds(110, 250, 90, 40);
        CrearCategoria.add(nombreCategoria);
        nombreCategoria.setBounds(210, 260, 180, 30);

        dificultad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        dificultad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dificultadItemStateChanged(evt);
            }
        });
        CrearCategoria.add(dificultad);
        dificultad.setBounds(630, 260, 140, 40);

        as.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        as.setText("Dificultad:");
        CrearCategoria.add(as);
        as.setBounds(460, 260, 120, 40);

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel22.setText("Premio:");
        CrearCategoria.add(jLabel22);
        jLabel22.setBounds(820, 260, 90, 40);

        premioN.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CrearCategoria.add(premioN);
        premioN.setBounds(940, 260, 100, 40);

        CrearC.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CrearC.setText("Crear");
        CrearC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearCActionPerformed(evt);
            }
        });
        CrearCategoria.add(CrearC);
        CrearC.setBounds(350, 480, 150, 40);

        CancaelarC.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CancaelarC.setText("Cancelar");
        CancaelarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancaelarCActionPerformed(evt);
            }
        });
        CrearCategoria.add(CancaelarC);
        CancaelarC.setBounds(640, 470, 150, 40);

        getContentPane().add(CrearCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void datosUsuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datosUsuarioKeyTyped
        if (this.datosUsuario.getText().length() >= 8) {
            evt.consume();
            showMessageDialog(this, "no se puede ingresar mas caracteres", "Â¡Maximo caracteres!",
                    ERROR_MESSAGE
            );
        }
        if (!validadCaracter(evt.getKeyChar())) {
            evt.consume();
            showMessageDialog(this, "no se puede ingresar ese caracter", "Â¡caracter invalido!",
                    ERROR_MESSAGE
            );
        }

        if (evt.getKeyChar() == 10) {
            jugarJBActionPerformed(null);
        }

    }//GEN-LAST:event_datosUsuarioKeyTyped

    private void jugarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jugarJBActionPerformed
        String infoUsuario = this.datosUsuario.getText();
        controlPreguntas.setRonda(1);
        try {
            cargarRonda();
        } catch (Exception ex) {

        }
        if (infoUsuario.equals("")) {
            showMessageDialog(this, "Ingrese un Nombre", "Â¡Error Datos!",
                    ERROR_MESSAGE
            );
        } else {
            controlPreguntas.addUsuario(infoUsuario);
            prepararEscenario();
//            
        }
    }//GEN-LAST:event_jugarJBActionPerformed

    private void datosUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datosUsuarioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            JDialog.setDefaultLookAndFeelDecorated(true);
            String[] selectionValues = {PREGUNTA, CATEGORIA};
            String initialSelection = "Dogs";
            String selection = (String) JOptionPane.showInputDialog(this, "Â¿Que desea crear?",
                    "Zoo Quiz", JOptionPane.QUESTION_MESSAGE, null, selectionValues, initialSelection);
            if (selection != null) {
                switch (selection) {
                    case PREGUNTA:

                        this.crearPregunta.setVisible(true);
                        break;
                    case CATEGORIA:
                        this.CrearCategoria.setVisible(true);
                        break;

                }
                this.InUsuarioJP.setVisible(false);
            }

        }
    }//GEN-LAST:event_datosUsuarioKeyPressed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        vaciarFormP();
        volverInicio(crearPregunta);
    }//GEN-LAST:event_cancelarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (validarDatosPregunta()) {
            JDialog.setDefaultLookAndFeelDecorated(true);
            int response = JOptionPane.showConfirmDialog(this, "Desea crear otra Pregunta", "Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response != JOptionPane.CLOSED_OPTION) {
                guardarPregunta();
                vaciarFormP();
                if (response == JOptionPane.NO_OPTION) {
                    volverInicio(crearPregunta);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Falta llenar datos");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CancaelarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancaelarCActionPerformed
        premioN.setText("");

        nombreCategoria.setText("");
        volverInicio(CrearCategoria);
    }//GEN-LAST:event_CancaelarCActionPerformed

    private void CrearCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearCActionPerformed
        if (validarDatosCategoria()) {
            JDialog.setDefaultLookAndFeelDecorated(true);
            int response = JOptionPane.showConfirmDialog(this, "Desea crear otra Categoria", "Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response != JOptionPane.CLOSED_OPTION) {

                guardarCategoria();

                vaciarFormC();
                if (response == JOptionPane.NO_OPTION) {
                    volverInicio(CrearCategoria);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Falta llenar datos");
        }
    }//GEN-LAST:event_CrearCActionPerformed

    private void dificultadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dificultadItemStateChanged

        if (estado) {
            int premio = obtenerDificulta();
            premio = premio * GANANCIA_POR_DIFICULTAD;
            this.premioN.setText(String.valueOf(premio));
            estado = false;
        } else {
            estado = true;
        }
    }//GEN-LAST:event_dificultadItemStateChanged

    private void RetirarseBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetirarseBActionPerformed
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(this, "Esta seguro que quiere abandonar", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.CLOSED_OPTION) {

            try {
             

                if (response == JOptionPane.YES_NO_OPTION) {
                    
                    controlPreguntas.guardarParticipante(Integer.parseInt(acumuladoJL.getText()));
                    reiniciar();
                }
            } catch (ManejoBDException ex) {
                showMessageDialog(
                        this,
                        ex.getMessage(),
                        "Â¡Error Documento!",
                        ERROR_MESSAGE
                );
            }
        }

    }//GEN-LAST:event_RetirarseBActionPerformed

    private void BR0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BR0MouseClicked
        repuestaSleccionada(1);
    }//GEN-LAST:event_BR0MouseClicked

    private void BR1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BR1MouseClicked
        repuestaSleccionada(2);
    }//GEN-LAST:event_BR1MouseClicked

    private void BR2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BR2MouseClicked
        repuestaSleccionada(3);
    }//GEN-LAST:event_BR2MouseClicked

    private void BR3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BR3MouseClicked
        repuestaSleccionada(4);
    }//GEN-LAST:event_BR3MouseClicked

    private void repuestaSleccionada(int respuestaS) {
        int repsuestaR = controlPreguntas.getRespuestaPreguntaRonga(controlPreguntas.getRonda());
        System.out.println(respuestaS == repsuestaR);
        System.out.println(respuestaS + " " + repsuestaR);
        if (respuestaS == repsuestaR) {
            
            int premioRonda = controlPreguntas.getPremioRonda(controlPreguntas.getRonda());
            int acumulado = Integer.parseInt(this.acumuladoJL.getText());
            acumulado += premioRonda;
            this.acumuladoJL.setText(String.valueOf(acumulado));

            controlPreguntas.aumentarRonda();
            try {
                cargarRonda();
            } catch (Exception ex) {
                   showMessageDialog(
                        this,
                        "Felicidades has  gana",
                        ex.getMessage(),
                        INFORMATION_MESSAGE
                );
                try {
                    int premio = Integer.parseInt(acumuladoJL.getText());
                    controlPreguntas.guardarParticipante(premio);
                    controlPreguntas.reiniciar();
                    reiniciar();
                } catch (ManejoBDException ex1) {
                    showMessageDialog(
                            this,
                            ex.getMessage(),
                            "Â¡no se pudo guardar el puntaje!",
                            ERROR_MESSAGE
                    );
                }
             

            }
        } else {

            try {
                showMessageDialog(
                        this,
                        "Perdiste",
                        "Mejor suerte para la proxima",
                        ERROR_MESSAGE
                );
                controlPreguntas.guardarParticipante(0);
                  reiniciar();
                controlPreguntas.reiniciar();
              

            } catch (ManejoBDException ex) {
                showMessageDialog(
                        this,
                        ex.getMessage(),
                        "Â¡no se pudo guardar el puntaje!",
                        ERROR_MESSAGE
                );
            }
        }

    }

    private void cargarRonda() throws Exception {
        int nRonda = controlPreguntas.getRonda();
        this.rondas.changeSelection(nRonda - 1, nRonda - 1, false, true);
        Pregunta pre = controlPreguntas.getPreguntaRonda(nRonda);
        pregunta.setText("<html>" + pre.getEncunciado() + "<html>");
        for (Map.Entry<Integer, String> respuesta : pre.getRespuestas().entrySet()) {

            opciones.get(respuesta.getKey() - 1).setText("<html>" + respuesta.getValue() + "<html>");

        }
        categoria.setText(controlPreguntas.getCategoriaRonda(nRonda));
        ronda.setText(String.valueOf(nRonda));

    }

    private void vaciarFormP() {
        this.newPregunta.setText("");
        this.respuesta1.setText("");
        this.respuesta2.setText("");
        this.respuesta3.setText("");
        this.respuesta4.setText("");

    }

    private void vaciarFormC() {
        this.nombreCategoria.setText("");
        this.premioN.setText("");

    }

    private void volverInicio(JPanel ventana) {
        ventana.setVisible(false);
        datosUsuario.setText("");
        this.InUsuarioJP.setVisible(true);
        this.datosUsuario.requestFocus();
    }

    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BR0;
    private javax.swing.JRadioButton BR1;
    private javax.swing.JRadioButton BR2;
    private javax.swing.JRadioButton BR3;
    private javax.swing.JButton CancaelarC;
    private javax.swing.JButton CrearC;
    private javax.swing.JPanel CrearCategoria;
    private javax.swing.JPanel InUsuarioJP;
    private javax.swing.JLabel NombreU;
    private javax.swing.JButton RetirarseB;
    private javax.swing.JLabel acumuladoJL;
    private javax.swing.JLabel as;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton cancelar;
    private javax.swing.JLabel categoria;
    private javax.swing.JComboBox<String> categorias;
    private javax.swing.JPanel crearPregunta;
    private javax.swing.JTextField datosUsuario;
    private javax.swing.JComboBox<String> dificultad;
    private javax.swing.JPanel escenario;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton jugarJB;
    private javax.swing.JTextArea newPregunta;
    private javax.swing.JTextField nombreCategoria;
    private javax.swing.JLabel participanteJL;
    private javax.swing.JLabel pregunta;
    private javax.swing.JLabel premio;
    private javax.swing.JLabel premioN;
    private javax.swing.JTable puntajes;
    private javax.swing.JComboBox<String> respuesta;
    private javax.swing.JTextArea respuesta1;
    private javax.swing.JTextArea respuesta2;
    private javax.swing.JTextArea respuesta3;
    private javax.swing.JTextArea respuesta4;
    private javax.swing.JLabel ronda;
    private javax.swing.JTable rondas;
    // End of variables declaration//GEN-END:variables

    private boolean validadCaracter(int keyChar) {

        boolean estado = true;

        if (isBetween(keyChar, 123, 255)
                || isBetween(keyChar, 32, 47)
                || isBetween(keyChar, 58, 64)
                || isBetween(keyChar, 91, 96)) {
            estado = false;
        }
        return estado;
    }

    private boolean isBetween(int x, int lower, int upper) {
        return lower <= x && x <= upper;
    }

    private void prepararEscenario() {

        participanteJL.setText(controlPreguntas.getNombreUsuario());
        acumuladoJL.setText("0");
        this.InUsuarioJP.setVisible(false);
        this.escenario.setVisible(true);
        this.escenario.setLocation(0, 0);
    }

    private void agruparBotones() {

        this.buttonGroup.add(this.BR0);
        this.opciones.add(BR0);
        this.buttonGroup.add(this.BR1);
        this.opciones.add(BR1);
        this.buttonGroup.add(this.BR2);
        this.opciones.add(BR2);
        this.buttonGroup.add(this.BR3);
        this.opciones.add(BR3);

    }

    private void guardarPregunta() {
        HashMap<Integer, String> opciones = new HashMap<>();
        opciones.put(1, respuesta1.getText());
        opciones.put(2, respuesta2.getText());
        opciones.put(3, respuesta3.getText());
        opciones.put(4, respuesta4.getText());
        try {
            controlPreguntas.guardarPregunta(newPregunta.getText(), respuesta.getSelectedIndex() + 1, (String) categorias.getSelectedItem(), opciones);
        } catch (ManejoBDException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void guardarCategoria() {
        try {
            controlPreguntas.guardarCategoria(nombreCategoria.getText(), obtenerDificulta(), obtenerPremioCreacion());
            completarForPreguntas();
        } catch (ManejoBDException ex) {
            showMessageDialog(
                    this,
                    ex.getMessage(),
                    "Â¡Error Documento!",
                    ERROR_MESSAGE
            );
        }
    }

    private void completarForPreguntas() {
        try {
            ArrayList<String> categorias = controlPreguntas.getCategoriasNombre();
            for (String categoria : categorias) {
                this.categorias.addItem(categoria);

            }

        } catch (ManejoBDException ex) {
            showMessageDialog(
                    this,
                    ex.getMessage(),
                    "Â¡Error Documento!",
                    ERROR_MESSAGE
            );
        }

    }

    private int obtenerDificulta() {
        return Integer.parseInt((String) dificultad.getSelectedItem());

    }

    private int obtenerPremioCreacion() {
        return Integer.parseInt((String) premioN.getText());

    }

    private boolean validarDatosCategoria() {
        boolean estado = true;
        if (nombreCategoria.getText().isEmpty()) {
            estado = false;
        }
        if (premioN.getText().isEmpty()) {
            estado = false;
        }

        return estado;
    }

    private boolean validarDatosPregunta() {
        boolean estado = true;
        if (newPregunta.getText().isEmpty()) {
            estado = false;
        }
        if (respuesta1.getText().isEmpty()) {
            estado = false;
        }
        if (respuesta2.getText().isEmpty()) {
            estado = false;
        }
        if (respuesta3.getText().isEmpty()) {
            estado = false;
        }

        if (respuesta4.getText().isEmpty()) {
            estado = false;
        }
        String dato = (String) categorias.getSelectedItem();
        if (dato.isEmpty()) {
            estado = false;
        }
        dato = (String) respuesta.getSelectedItem();
        if (dato.isEmpty()) {
            estado = false;
        }

        return estado;
    }

    private void llenarTabla() {
        modelRondas = new DefaultTableModel();
        modelRondas.addColumn("Ronda");
        modelRondas.addColumn("Premio");

        rondas.setModel(modelRondas);
        HashMap<Integer, Ronda> datoRondas = controlPreguntas.getRondas();
        System.out.println(categorias);
        String[] datos = new String[3];
        for (Map.Entry<Integer, Ronda> ronda : datoRondas.entrySet()) {
            datos[0] = String.valueOf(ronda.getKey());
            datos[1] = String.valueOf(ronda.getValue().getCategoria().getPremio());
            modelRondas.addRow(datos);

        }
        {

        }

    }

    private void llenarPuntajes() {
        try {
            //puntajesIJL
            modelPuntaje = new DefaultTableModel();
            modelPuntaje.addColumn("Nombre");
            modelPuntaje.addColumn("Fecha");
            modelPuntaje.addColumn("Premio");
            puntajes.setModel(modelPuntaje);
            ArrayList<Participante> participantes = controlPreguntas.getPuntajes();
            String[] datos = new String[3];
            for (Participante participante : participantes) {
                datos[0] = participante.getNombre();
                datos[1] = participante.getFecha();
                datos[2] = String.valueOf(participante.getPremioGanado());
                modelPuntaje.addRow(datos);
            }

        } catch (ManejoBDException ex) {
            showMessageDialog(
                    this,
                    ex.getMessage(),
                    "no se pudo cargar puntajes",
                    ERROR_MESSAGE
            );
        }
    }

    private void reiniciar() {
        llenarPuntajes();
        llenarTabla();
        volverInicio(escenario);
    }

}
